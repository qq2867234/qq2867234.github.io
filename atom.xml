<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>漠北以北</title>
  <subtitle>Every day a little better than yesterday</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://qq2867234.github.io/"/>
  <updated>2016-04-25T16:52:56.716Z</updated>
  <id>http://qq2867234.github.io/</id>
  
  <author>
    <name>漠北以北</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>创建高性能的索引</title>
    <link href="http://qq2867234.github.io/2016/04/24/create-high-performance-index/"/>
    <id>http://qq2867234.github.io/2016/04/24/create-high-performance-index/</id>
    <published>2016-04-24T10:07:17.000Z</published>
    <updated>2016-04-25T16:52:56.716Z</updated>
    
    <content type="html">&lt;p&gt;索引是存储引擎用于&lt;strong&gt;高效获取数据&lt;/strong&gt;的一种&lt;strong&gt;数据结构&lt;/strong&gt;，索引其实就是一种数据结构。索引对于良好的性能非常关键，索引优化是对查询性能优化最有效的手段。&lt;/p&gt;
&lt;h2 id=&quot;索引基础&quot;&gt;索引基础&lt;/h2&gt;&lt;p&gt;要理解索引是如何工作，最简单的方法就是去看一本书的目录：如果想在一本书中找到特定的章节，我们不会去翻阅整本书来找出这个章节，这样效率很低，我们肯定会先看目录，找到对应的页码，然后直接翻到指定页码。&lt;/p&gt;
&lt;p&gt;MySQL的存储引擎也是用类似的方法使用索引：先在索引中找到对应的值，然后根据匹配的索引记录找到对应的数据行。&lt;/p&gt;
&lt;p&gt;索引可以包含一个或多个列。MySQL只能高效的使用索引的&lt;strong&gt;最左前缀列&lt;/strong&gt;，所以当索引包含多个列的时候，列的顺序十分重要。&lt;/p&gt;
&lt;h2 id=&quot;索引的类型&quot;&gt;索引的类型&lt;/h2&gt;&lt;p&gt;在MySQL中，索引是在存储引擎层，而不是服务器层实现。所以，不同存储引擎的索引的工作方式并不一样，也不是所有的存储引擎都支持所有类型的索引。&lt;/p&gt;
&lt;p&gt;下面是MySQL支持的索引类型，以及各自的优缺点。&lt;/p&gt;
&lt;h3 id=&quot;B-Tree索引&quot;&gt;B-Tree索引&lt;/h3&gt;&lt;p&gt;当我们说到索引，如果没有特别指明类型，一般说的就是B-Tree索引，它使用B-Tree数据结构来存储数据。目前大部分数据库系统及文件系统都采用B-Tree或其变种B+Tree作为索引结构。&lt;/p&gt;
&lt;p&gt;虽然是使用B-Tree，但是不同的存储引擎可能会使用一些变种的算法，比如InnoDB使用的是B+Tree，即使它的索引名字是BTREE。&lt;/p&gt;
&lt;p&gt;另外，不同的存储引擎，也会以不同的方式使用B-Tree索引，性能也各有不同。比如，InnoDB按原数据格式存储，而MyISAM则使用前缀压缩技术来使得索引更小。再如InnoDB根据&lt;strong&gt;主键&lt;/strong&gt;引用被索引的数据行，而MyISAM通过数据的&lt;strong&gt;物理位置&lt;/strong&gt;引用被索引的数据行。&lt;/p&gt;
&lt;p&gt;B-Tree索引中所有的值都是按顺序存储的，并且每一个叶子节点到根的距离都相同。&lt;/p&gt;
&lt;p&gt;下图是B-Tree索引的抽象表示，大致反映了InnoDB索引是如何工作的。&lt;br&gt;&lt;img src=&quot;http://7xtdiw.com1.z0.glb.clouddn.com/1.png&quot; alt=&quot;建立在B+Tree结构上的索引&quot;&gt;&lt;/p&gt;
&lt;p&gt;如上图所示，在B树中，以逻辑页的方式组织数据，每个&lt;strong&gt;非叶子页&lt;/strong&gt;包含n个key和n+1个指针（key与指针相互间隔），分别保存着&lt;strong&gt;索引列的值&lt;/strong&gt;和&lt;strong&gt;指向子页的指针&lt;/strong&gt;，这些指针所指向的子页，其内部包含的所有的key值都界于指针左右的两个key值之间。&lt;strong&gt;叶子页&lt;/strong&gt;比较特殊，它包含n个key和1个指针，与非叶子页不同的是，叶子页中的key不仅仅保存索引列的值，&lt;strong&gt;还保存了主键值&lt;/strong&gt;（MyISAM引擎保存的是行的物理位置），用来获取完整的数据行，指针则是&lt;strong&gt;指向下一个叶子页&lt;/strong&gt;（注：这是带有顺序访问指针的B+Tree），这个指针是用来提高范围查询的性能，有了这个指针，当进行范围查询的时候，只要在B树中查到范围区间内的最小值，然后顺着叶子页的指针向后遍历，就可以一次访问到区间内的所有数据，极大的提高了范围查询效率。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;逻辑页是计算机管理存储器的逻辑块，操作系统将内存和磁盘分割为连续的大小相等的块，这里的每个块称为一个逻辑页（在许多操作系统中，页的大小通常为4K，对于InnoDB引擎则为16K），内存和磁盘以页为单位交换数据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有了B-Tree索引，进行查询的时候就不再需要进行全表扫描，而是从索引的根节点开始向下搜索，通过比较&lt;strong&gt;要查找的值&lt;/strong&gt;和&lt;strong&gt;节点页中的key值&lt;/strong&gt;就可以找到合适的指针进入下层子节点，这些指向子节点的指针实际上定义了子节点内值的上限和下限。最终存储引擎要么找到对应的值，要么记录不存在。&lt;/p&gt;
&lt;p&gt;B-Tree对索引列是顺序组织存储的，所以很适合查找范围数据。&lt;/p&gt;
&lt;p&gt;举个更直观的例子，假设有如下表：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CREATE TABLE People (&amp;#10;&amp;#9;last_name   varchar(50)    not null,&amp;#10;&amp;#9;first_name  varchar(50)    not null,&amp;#10;&amp;#9;dob         date           not null,&amp;#10;&amp;#9;gender      enum(&amp;#39;m&amp;#39;, &amp;#39;f&amp;#39;) not null,&amp;#10;&amp;#9;key(last_name, first_name, dob)&amp;#10;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在表中，添加了联合索引(last_name, first_name, dob)之后，对于表中的每一行数据，在索引中都保存了索引列的值(last_name, first_name, dob)，该索引的数据存储方式如下图所示：&lt;br&gt;&lt;img src=&quot;http://7xtdiw.com1.z0.glb.clouddn.com/create-high-performance-index-2.png&quot; alt=&quot;B+Tree索引数中的部分条目示例&quot;&gt;&lt;/p&gt;
&lt;p&gt;在图中可以看到，每个页中的值对应的是我们定义的3个索引列的值（last_name, first_name, dob），需要注意的是，索引对多个列进行排序的依据是定义索引时的顺序。（注：在图中，叶子页实际上还保存了主键值，只是在图中没有体现出来）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可以使用B-Tree索引的查询类型&lt;/strong&gt;&lt;br&gt;全键值匹配、索引第一列全值匹配、索引第一列前缀匹配、索引第一列范围匹配、前N列全匹配并范围匹配第N+1列、只访问索引的查询（覆盖索引）。&lt;br&gt;简单来说就是一个原则，必须从索引的最左列开始匹配。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关于B-Tree索引的限制&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;必须按照索引的最左列开始查找。&lt;/li&gt;
&lt;li&gt;不能跳过索引中的列。（某些情况可以使用IN()技巧来绕过这个限制，前提是列值的数量有限）&lt;/li&gt;
&lt;li&gt;如果查询中有某个列的范围查询，则其右边所有的列都无法使用索引优化查找。（可以使用多个等于条件来替代范围条件，前提是范围查询列值的数量有限）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;到这里应该可以明白，索引列的顺序是多么的重要，在优化性能的时候，可能需要使用相同的列但顺序不同的索引来满足不同类型的查询需求。&lt;/p&gt;
&lt;p&gt;注：有些限制并不是B-Tree本身导致的，而是MySQL优化器和存储引擎使用索引的方式导致的，这部分限制有可能在未来的版本中不再是限制。&lt;/p&gt;
&lt;h3 id=&quot;哈希索引&quot;&gt;哈希索引&lt;/h3&gt;&lt;p&gt;哈希索引基于哈希表实现，只有&lt;strong&gt;精确匹配&lt;/strong&gt;索引&lt;strong&gt;所有列&lt;/strong&gt;的查询才有效。对于每一行数据，存储引擎都会对所有的索引列计算一个哈希值，作为键存储在哈希表中，对应的值则是指向每个数据行的指针。如果计算出来的哈希值重复，则以链表的方式存放多个行指针。&lt;/p&gt;
&lt;p&gt;哈希索引的数据结构简化如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;   key  |      value     &amp;#10;:------:|:---------------:&amp;#10; 2323   | &amp;#25351;&amp;#21521;&amp;#31532;1&amp;#34892;&amp;#30340;&amp;#25351;&amp;#38024; &amp;#10; 2358   | &amp;#25351;&amp;#21521;&amp;#31532;4&amp;#34892;&amp;#30340;&amp;#25351;&amp;#38024; &amp;#10; 7437   | &amp;#25351;&amp;#21521;&amp;#31532;2&amp;#34892;&amp;#30340;&amp;#25351;&amp;#38024; &amp;#10; 8784   | &amp;#25351;&amp;#21521;&amp;#31532;3&amp;#34892;&amp;#30340;&amp;#25351;&amp;#38024;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上表中的key是根据索引列的值计算得到的哈希值，value则是行指针。需要注意的是，每个key的编号是顺序的，但是数据行不是。&lt;/p&gt;
&lt;p&gt;当MySQL判断一个查询能够使用哈希索引进行查询的时候，会先对索引列使用特定的哈希函数计算得到哈希值，然后再使用该值到哈希表中寻找对应的行指针（有可能多个，使用链表串连），最后比较行指针指向的数据行的值是否与查询的条件一致。&lt;/p&gt;
&lt;p&gt;因为哈希索引只存储&lt;strong&gt;哈希值&lt;/strong&gt;和&lt;strong&gt;行指针&lt;/strong&gt;，所以索引的结构十分紧凑，查找的速度也非常快。&lt;/p&gt;
&lt;p&gt;但是，哈希索引也有一些限制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;哈希索引&lt;strong&gt;不存储字段值&lt;/strong&gt;，所以不能使用索引中的值来避免读取行。（不过，访问内存中的行的速度很快，所以大部分情况下这一点对性能的影响并不明显）&lt;/li&gt;
&lt;li&gt;因为数据不是按照索引值顺序存储的，所以&lt;strong&gt;无法用于排序&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不支持部分索引列的查询，只支持等值比较查询&lt;/strong&gt;。（因为是使用索引列的全部内容来计算哈希值）&lt;/li&gt;
&lt;li&gt;当出现哈希冲突的时候，存储引擎必须遍历链表中的所有行指针，逐行比较，直到找到所有符合条件的行。如果哈希冲突很多，不仅效率会受到影响，而且维护索引的代价也会很高，冲突越多，代价越高。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;综上，哈希索引只适用于某些特定的场合。&lt;/p&gt;
&lt;h3 id=&quot;空间数据索引&quot;&gt;空间数据索引&lt;/h3&gt;&lt;p&gt;MyISAM引擎支付空间索引，可以用来存储地理数据。空间索引会从所有维度来索引数据，所以不受前缀查询的限制，查询时可以使用任意维度来组合查询。&lt;/p&gt;
&lt;p&gt;MySQL的GIS支持并不完善，索引大部分人不会使用这个特性，开源的关系数据库中对GIS的解决方案做的比较好的是PostgreSQL的PostGIS。&lt;/p&gt;
&lt;h3 id=&quot;全文索引&quot;&gt;全文索引&lt;/h3&gt;&lt;p&gt;全文索引是一种特殊类型的索引，它查找的是文本中的关键词，而不是直接比较索引中的值。不同于其它索引类型，它有许多需要注意的细节，比如停用词、分词、词干和复数、布尔搜索等。全文索引更类似于搜索引擎做的事，而不是简单的WHERE条件匹配。&lt;/p&gt;
&lt;p&gt;目前MySQL对全文索引的支持还不太好，有诸多限制，所以，大多数情况下我们会使用别的解决方案，例如Lucene、ElasticSearch、Solr等。&lt;/p&gt;
&lt;h2 id=&quot;索引是最好的解决方案吗&quot;&gt;索引是最好的解决方案吗&lt;/h2&gt;&lt;p&gt;索引并不总是最好的解决方案。总的来说，只有当索引帮助存储引擎快速查找到记录带来的好处大于其带来的额外工作时，索引才是有效的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于非常小的表，大部分情况下，简单的全表扫描更高效。&lt;/li&gt;
&lt;li&gt;对于中到大型的表，索引就非常有效。&lt;/li&gt;
&lt;li&gt;但对于特大型的表，建立和使用索引的代价将随之增长。这种情况，则需要一种技术可以直接区分出查询需要的一组数据，而不是一条记录一条记录地匹配，例如可以使用分区技术。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;高性能的索引策略&quot;&gt;高性能的索引策略&lt;/h2&gt;&lt;p&gt;正确的创建和使用索引，是实现高性能查询的基础。&lt;/p&gt;
&lt;h3 id=&quot;独立的列&quot;&gt;独立的列&lt;/h3&gt;&lt;p&gt;“独立的列”是指索引列不能是表达式的一部分，也不能是函数的参数，如果查询中的列不是独立的，那么MySQL就不会使用索引。&lt;/p&gt;
&lt;p&gt;下面是一些常见的错误：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;select … where id + 1 = 5&lt;/li&gt;
&lt;li&gt;select … where current_date - date_col &amp;lt; 10&lt;/li&gt;
&lt;li&gt;select … where date_format(date_col, ‘%Y-%m-%d’) = date_format(current_date, ‘%Y-%m-%d’)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们应该养成简化WHERE条件的习惯，始终将索引列单独放在比较符号的一侧。&lt;/p&gt;
&lt;h3 id=&quot;前缀索引和索引选择性&quot;&gt;前缀索引和索引选择性&lt;/h3&gt;&lt;p&gt;前缀索引：在建立索引的时候，只索引列的开始部分字符，而不是索引完整列。&lt;br&gt;索引选择性：对于要索引的列，不重复的行数(也称为基数)与表的总记录数的比值，索引选择性越高，则查询效率越高，因为选择性高的索引可以让MySQL在查找时过滤掉更多的行。&lt;/p&gt;
&lt;p&gt;当索引很长的字符串的时候，索引会变得大而且慢。这时候通常可以使用前缀索引，这样可以节约索引空间，从而提高索引效率。虽然这样会降低索引的选择性，不过一般情况下，列的前缀的选择性也是足够高的，足以满足查询性能。&lt;/p&gt;
&lt;p&gt;创建前缀索引的关键在于选择合适的前缀长度，从而保证较高的选择性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;计算合适的前缀长度&lt;/strong&gt;，有两种常用方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;统计最常见的值的数量，然后再统计最常见的前缀的数量，让二者的数量接近。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#20808;&amp;#32479;&amp;#35745;&amp;#26368;&amp;#24120;&amp;#35265;&amp;#20540;&amp;#30340;&amp;#25968;&amp;#37327;&amp;#65306;&amp;#10;&amp;#9;select col, count(*) as cnt &amp;#10;&amp;#9;from table group by col order by cnt desc limit 10;&amp;#10;&amp;#20877;&amp;#32479;&amp;#35745;&amp;#26368;&amp;#24120;&amp;#35265;&amp;#30340;&amp;#21069;&amp;#32512;&amp;#30340;&amp;#25968;&amp;#37327;&amp;#65292;&amp;#21069;&amp;#32512;&amp;#38271;&amp;#24230;&amp;#20026;length&amp;#10;&amp;#9;select left(col, length) as pref, count(*) as cnt &amp;#10;&amp;#9;from table group by pref order by cnt desc limit 10;&amp;#10;&amp;#28982;&amp;#21518;&amp;#22686;&amp;#21152;&amp;#21069;&amp;#32512;&amp;#38271;&amp;#24230;&amp;#65292;&amp;#30452;&amp;#21040;&amp;#20197;&amp;#19978;&amp;#20004;&amp;#26465;SQL&amp;#32479;&amp;#35745;&amp;#20986;&amp;#26469;&amp;#30340;&amp;#32467;&amp;#26524;&amp;#25509;&amp;#36817;&amp;#65292;&amp;#25509;&amp;#36817;&amp;#21518;&amp;#30340;length&amp;#21363;&amp;#20026;&amp;#21512;&amp;#36866;&amp;#30340;&amp;#21069;&amp;#32512;&amp;#38271;&amp;#24230;&amp;#12290;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;计算完整列的选择性和前缀的选择性，让二者接近。&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#20808;&amp;#35745;&amp;#31639;&amp;#23436;&amp;#25972;&amp;#21015;&amp;#30340;&amp;#36873;&amp;#25321;&amp;#24615;&amp;#65306;&amp;#10;&amp;#9;select count(distinct col)/count(*) from table;&amp;#10;&amp;#20877;&amp;#35745;&amp;#31639;&amp;#19981;&amp;#21516;&amp;#21069;&amp;#32512;&amp;#38271;&amp;#24230;&amp;#30340;&amp;#36873;&amp;#25321;&amp;#24615;&amp;#65306;&amp;#10;&amp;#9;select count(distinct left(col, 3))/count(*) as sel3,&amp;#10;&amp;#9;&amp;#9;count(distinct left(col, 4))/count(*) as sel4,&amp;#10;&amp;#9;&amp;#9;count(distinct left(col, 5))/count(*) as sel5,&amp;#10;&amp;#9;&amp;#9;count(distinct left(col, 6))/count(*) as sel6,&amp;#10;&amp;#9;&amp;#9;count(distinct left(col, 7))/count(*) as sel7 &amp;#10;&amp;#9;from table;&amp;#10;&amp;#26368;&amp;#21518;&amp;#36873;&amp;#25321;&amp;#19968;&amp;#20010;&amp;#36873;&amp;#25321;&amp;#24615;&amp;#25509;&amp;#36817;&amp;#30340;&amp;#21069;&amp;#32512;&amp;#38271;&amp;#24230;&amp;#21363;&amp;#21487;&amp;#12290;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;找到了合适的前缀长度后，就可以通过下面的SQL来&lt;strong&gt;创建前缀索引&lt;/strong&gt;了：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-- &amp;#22312;col&amp;#21015;&amp;#19978;&amp;#21019;&amp;#24314;&amp;#38271;&amp;#24230;&amp;#20026;7&amp;#30340;&amp;#21069;&amp;#32512;&amp;#32034;&amp;#24341;&amp;#10;alter table table_name add key(col(7));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;另一方面，前缀索引也有其&lt;strong&gt;缺陷&lt;/strong&gt;：无法使用前缀索引做order by和group by，也无法做覆盖索引。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用前缀索引的常见场景&lt;/strong&gt;：针对很长的十六进制唯一ID使用前缀索引。比如使用MySQL来存储网站的sessionid的时候，需要在一个很长的十六进制字符串上创建索引，这时候如果采用长度为8的前缀索引通常能显著的提升性能。&lt;/p&gt;
&lt;p&gt;注：MySQL不支持后缀索引，但是可以把字符反转后存储，并基于此建立前缀索引。&lt;/p&gt;
&lt;h3 id=&quot;多列索引&quot;&gt;多列索引&lt;/h3&gt;&lt;p&gt;多列索引包括：多个单列索引和联合索引。&lt;/p&gt;
&lt;p&gt;很多人对多列索引的理解不够，常见的错误是：为每个列创建独立的索引，或者按照错误的顺序创建多列索引。&lt;/p&gt;
&lt;p&gt;实际上，创建多个单列索引大部分情况下并不能提高查询性能。MySQL5.0以后的版本引入了一种叫“索引合并“策略，一定程度上可以使用表上的多个单列索引来定位指定的行，但是之前的版本只能使用其中某一个单列索引，这种情况下没有哪一个单列索引是非常有效的。&lt;/p&gt;
&lt;p&gt;对于下面的SQL：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;select id1, id2 from table where id1 = 1 or id2 = 1;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在老的MySQL版本中，不论创建什么索引，对这个查询都会使用全表扫描。&lt;br&gt;除非将OR条件改为UNION ALL的方式，然后分别对id1和id2建立单列索引：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;select id1, id2 from table where id1 = 1&amp;#10;union all&amp;#10;select id1, id2 from table where id2 = 1 and id1 &amp;#60;&amp;#62; 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是在MySQL5.0以后的版本，查询能够同时使用这两个单列索引进行查询，然后将结果合并。&lt;/p&gt;
&lt;p&gt;虽然有了新的版本有了索引合并策略，但这是一种优化的结果，实际上更多时候，这也说明了表上的索引建得很糟糕。下面是一些经验：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对多个索引使用AND条件时，需要一个包含所有相关列的联合索引，而不是多个单列索引。&lt;/li&gt;
&lt;li&gt;对多个索引使用OR条件时，通常需要耗费大量的CPU和内存资源在算法的缓存、排序和合并操作上，还可能会影响查询的并发性。但如果是单独运行这样的查询，则可以忽略对并发性的影响。通常来说，还不如将查询改写成UNION的方式更好。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;选择合适的索引列顺序&quot;&gt;选择合适的索引列顺序&lt;/h3&gt;&lt;p&gt;如何选择合适的索引列顺序，可以说是最容易引起困惑的问题了。&lt;/p&gt;
&lt;p&gt;有一个经验法则：&lt;strong&gt;将选择性最高的列放到索引最前列&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这个经验在不需要考虑排序和分组时很有用，因为这时候索引的作用只是用来优化where条件的查询。但是在需要考虑排序和分组时，&lt;strong&gt;避免随机IO和排序&lt;/strong&gt;则更重要。&lt;/p&gt;
&lt;p&gt;另外，性能不只是依赖于索引列的选择性，也和查询条件的具体值有关，可能需要根据那些运行频率最高的查询来调整索引列的顺序，让这种情况下索引的选择性最高。&lt;/p&gt;
&lt;p&gt;以下面的查询为例：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;select * from payment where staff_id = 2 and customer_id = 584;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;是应该创建一个(staff_id, customer_id)索引还是应该颠倒一下顺序呢？可以分别计算列的选择性，然后将选择性高的作为索引列的第一列。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;select count(distinct staff_id)/count(*) as staff_selectivity,&amp;#10;  count(distinct customer_id)/count(*) as customer_selectivity&amp;#10;from payment \G&amp;#10;************************* 1.row ************************&amp;#9;&amp;#10;&amp;#9;&amp;#9;staff_selectivity : 0.0001&amp;#10;&amp;#9;customer_selectivity  : 0.0373&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;customer_id的选择性更高，所以将其作为索引的第一列。&lt;/p&gt;
&lt;p&gt;需要注意的是，上面的方式在多数情况是有用的，但是不要假设平均情况下的性能能代表特殊情况下的性能，特殊情况可能会摧毁整个应用的性能。所以，特殊情况，需要特殊考虑。&lt;/p&gt;
&lt;h3 id=&quot;聚簇索引&quot;&gt;聚簇索引&lt;/h3&gt;&lt;p&gt;聚簇索引并不是一种索引类型，而是一种&lt;strong&gt;数据存储方式&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;InnoDB的聚簇索引实际上在同一个结构中保存了B-Tree索引和数据行。&lt;/p&gt;
&lt;p&gt;当表有聚簇索引时，它的数据行实际上存放在索引的叶子页中，因为无法将数据行存放在两个不同的地方，所以一个表只能有一个聚簇索引。&lt;/p&gt;
&lt;p&gt;聚簇索引中的记录存放方式，如下图所示：&lt;br&gt;&lt;img src=&quot;http://7xtdiw.com1.z0.glb.clouddn.com/create-high-performance-index-3.png&quot; alt=&quot;聚簇索引的数据分布&quot;&gt;&lt;br&gt;需要注意的是，叶子页保存了行的全部数据，节点页只保存了主键值。&lt;/p&gt;
&lt;p&gt;MySQL无法选择哪个索引作为聚簇索引，对于InnoDB，默认使用主键作为聚簇索引，如果没有定义主键，会选择一个唯一的非空索引代替，如果没有这样的索引，则隐式定义一个主键来作为聚簇索引。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;聚簇索引的优点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以把相关数据保存在一起，获取相关数据时可以减少从磁盘读取数据页，从而减少磁盘IO。&lt;/li&gt;
&lt;li&gt;由于将索引和数据保存在同一个B-Tree种，因此获取数据通常比在非聚簇索引中查找要快。&lt;/li&gt;
&lt;li&gt;使用覆盖索引的查询可以直接使用页节点中的主键值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;聚簇索引的缺点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;插入速度严重依赖于插入顺序。在InnoDB中按照主键的顺序插入是最快的方式。如果不是按照主键顺序插入，那么在完成后最好使用OPTIMIZE TABLE命令重新组织一下表。&lt;/li&gt;
&lt;li&gt;更新聚簇索引列的代价很高，因为会强制InnoDB将每个被更新的行移动到新的位置。&lt;/li&gt;
&lt;li&gt;插入新行或者主键被更新导致需要移动行的时候，可能面临“页分裂”问题。当行的主键值要求必须将这一行插入到某个已满的页中时，存储引擎会将该页分裂成两个页面来容纳该行，这就是一次页分裂操作，会导致表占用更多的磁盘空间。&lt;/li&gt;
&lt;li&gt;可能导致全表扫描变慢，尤其是行比较稀疏，或者由于页分裂导致数据存储不连续的时候，因为需要访问更多的页，意味着需要更多的磁盘IO。&lt;/li&gt;
&lt;li&gt;二级索引访问需要两次索引查找，而不是一次。（因为二级索引叶子页中保存的是行的主键值，这意味着存储引擎在获得主键值后，还需要根据主键值去聚簇索引中查找对应的数据行，这就做了重复的工作：两次B-Tree查找。对应InnoDB，自适应哈希索引能够减少这样的重复工作）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;*覆盖索引&quot;&gt;*覆盖索引&lt;/h3&gt;&lt;p&gt;覆盖索引的定义：如果一个索引包含（或者说覆盖）所有需要查询的字段的值，就成为覆盖索引。&lt;br&gt;MySQL可以使用覆盖索引来直接获取列的数据，这样就不再需要回表查询来读取数据行，能够极大地提高性能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;覆盖索引带来的好处&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由于索引的列通常远小于数据行的大小，所以覆盖索引极大地减少了数据访问量。&lt;/li&gt;
&lt;li&gt;由于InnoDB的二级索引在叶子节点中只保存了行的主键值，所以如果二级索引能够覆盖查询，则可以避免对主键索引的二次查询。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于覆盖索引必须要存储索引列的值，而除了B-Tree索引以外的其它索引类型都不存储索引列的值，所以MySQL只能使用B-Tree索引做覆盖索引。&lt;/p&gt;
&lt;p&gt;下面是一个SQL查询：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;select id, col from table;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果我们在表中创建一个多列索引(id, col)，那么上面的查询就可以称为索引覆盖查询，因为要查询的列在索引中都可以直接获取到。&lt;/p&gt;
&lt;p&gt;下面举个例子来说明，如何使用覆盖索引来优化SQL语句。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;select * from products where actor = &amp;#39;sean carrey&amp;#39; and title like &amp;#39;%pollo%&amp;#39;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;对于上面的SQL，创建多列索引(actor, title)，即使这样，索引也无法覆盖该查询，因为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查询从表中选择了所有列。&lt;/li&gt;
&lt;li&gt;不能在索引中使用以通配符开头的like查询。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有办法可以解决上面说的两个问题，只需要重写并巧妙的设计索引。&lt;br&gt;先将索引扩展至覆盖三个数据列(actor, title, prod_id)，然后重写查询：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;select * from products&amp;#10;join (&amp;#10;&amp;#9;select prod_id from products where actor = &amp;#39;Sean Carrey&amp;#39; and title like &amp;#39;%Apollo%&amp;#39;&amp;#10;) as t1 &amp;#10;on (t1.prod_id = products.prod_id);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面重写后的查询，在子查询中就可以使用覆盖索引，找到匹配的prod_id，再根据prod_id在外层查询匹配获取需要的所有列值。这种方式叫做&lt;strong&gt;延迟关联&lt;/strong&gt;，因为延迟了对列的访问。&lt;br&gt;这样优化能提升效率的原因在于：巧妙的运用了覆盖索引，从而减少了需要读取的完整数据行。&lt;br&gt;这样&lt;strong&gt;优化的效果取决于where条件匹配返回的行数&lt;/strong&gt;。&lt;br&gt;假设这个products表有100万行记录，我们来看一下上面两个查询在三个不同的数据集上的表现：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一个数据集：Sean Carrey出演了 &lt;strong&gt;30000&lt;/strong&gt; 部作品，其中有 &lt;strong&gt;20000&lt;/strong&gt; 部的标题中包含了Apollo。&lt;/li&gt;
&lt;li&gt;第二个数据集：Sean Carrey出演了 &lt;strong&gt;30000&lt;/strong&gt; 部作品，其中有 &lt;strong&gt;40&lt;/strong&gt; 部的标题中包含了Apollo。&lt;/li&gt;
&lt;li&gt;第三个数据集：Sean Carrey出演了 &lt;strong&gt;50&lt;/strong&gt; 部作品，其中有 &lt;strong&gt;10&lt;/strong&gt; 部的标题中包含了Apollo。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用上面三种数据集来测试两种不同的查询，结果如下：&lt;br&gt;&lt;img src=&quot;http://7xtdiw.com2.z0.glb.clouddn.com/create-high-performance-index-4.png&quot; alt=&quot;测试结果&quot;&gt;&lt;/p&gt;
&lt;p&gt;结果分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;示例1中，查询返回了一个很大的结果集，因此看不到优化后的效果。因为大部分时间都花在读取和发送数据上了。&lt;/li&gt;
&lt;li&gt;示例2中，经过覆盖索引的过滤，只返回了很少的结果集，优化的效果非常明显，主要得益于只需要读取40行完整数据行，而不是原来需要的30000行。&lt;/li&gt;
&lt;li&gt;示例3中，效率反而下降，因为索引过滤时符合第一个条件的结果集已经很小，所以子查询带来的成本反而比从表中直接提取完整行更高。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这也是优化大分页的一种方法：使用延迟关联，并使用覆盖索引查询需要的主键，再根据主键关联原表来获得需要的行。这可以大大减少MySQL需要扫描的行数。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;select &amp;#60;cols&amp;#62; from table inner join( &amp;#10;&amp;#9;select &amp;#60;primary key cols&amp;#62; from table limit 100000, 10&amp;#10;) as t using(&amp;#60;primary key cols&amp;#62;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;另外，可以进一步优化InnoDB，因为InnoDB的二级索引的叶子节点包含了主键的值，所以可以有效地利用这些主键列来覆盖查询。&lt;/p&gt;
&lt;h3 id=&quot;*使用索引扫描来做排序&quot;&gt;*使用索引扫描来做排序&lt;/h3&gt;&lt;p&gt;MySQL有两种方式可以生成有序的结果：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过排序操作&lt;/li&gt;
&lt;li&gt;按索引顺序扫描&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;扫描索引本身是很快的，但是，如果索引不能覆盖查询所需的全部列，那就不得不每扫描一条索引记录就都回表查询一次对应的行，这基本上都是随机IO，因此按索引顺序读取数据的速度通过要比顺序地全表扫描慢。&lt;/p&gt;
&lt;p&gt;MySQL可以使用同一个索引既满足排序，又用于查找行，设计索引时应尽可能地同时满足这两种任务，这样最好。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;能使用索引做排序的条件&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;索引列的顺序和order by子句的顺序完全一致，并且所有列的排序方向都一样（要么全是升序，要么全是降序）。&lt;/li&gt;
&lt;li&gt;多表查询时，order by子句引用的字段全部为第一个表。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;限制&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;order by子句和查找型查询的限制一样，都需要满足索引的最左前缀的要求。&lt;/li&gt;
&lt;li&gt;有一种情况情况可以不满足最左前缀要求：where和order by中的列可以组合成最左前缀，并且where子句中都是使用常量查询（等值查询）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后，是一些基本原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;尽可能将需要做范围查询的列放到索引的最后面&lt;/li&gt;
&lt;li&gt;可以通过In()的方式覆盖那些不在where子句中的列&lt;/li&gt;
&lt;li&gt;避免多个范围条件，可以的话，使用多个等值条件带范围条件。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;索引是存储引擎用于&lt;strong&gt;高效获取数据&lt;/strong&gt;的一种&lt;strong&gt;数据结构&lt;/strong&gt;，索引其实就是一种数据结构。索引对于良好的性能非常关键，索引优化是对查询性能优化最有效的手段。&lt;/p&gt;
&lt;h2 id=&quot;索引基础&quot;&gt;索引基础&lt;/h2&gt;&lt;p&gt;要理解
    
    </summary>
    
      <category term="MySQL" scheme="http://qq2867234.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://qq2867234.github.io/tags/MySQL/"/>
    
      <category term="索引" scheme="http://qq2867234.github.io/tags/%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>XSS防御</title>
    <link href="http://qq2867234.github.io/2015/11/09/XSS-defence/"/>
    <id>http://qq2867234.github.io/2015/11/09/XSS-defence/</id>
    <published>2015-11-09T15:24:48.000Z</published>
    <updated>2016-04-25T13:49:43.237Z</updated>
    
    <content type="html">&lt;h2 id=&quot;XSS的定义&quot;&gt;XSS的定义&lt;/h2&gt;&lt;p&gt;XSS 全称Cross Site Script，跨站脚本攻击，HTML注入。&lt;/p&gt;
&lt;p&gt;通过前端代码注入篡改网页，插入恶意脚本，从而在用户浏览网页时，控制用户浏览器。&lt;/p&gt;
&lt;p&gt;带来cookie劫持问题、窃取用户信息、模拟用户身份执行操作等。&lt;/p&gt;
&lt;h2 id=&quot;防御&quot;&gt;防御&lt;/h2&gt;&lt;h4 id=&quot;HttpOnly（有助于缓解XSS攻击）&quot;&gt;HttpOnly（有助于缓解XSS攻击）&lt;/h4&gt;&lt;p&gt;浏览器禁止页面的脚本访问带有HttpOnly属性的Cookie（严格来讲它解决的是Cookie劫持攻击）&lt;/p&gt;
&lt;p&gt;一旦窃取用户的Cookie，就可以登录它的账户，但如果为Cookie设置了HttpOnly，这种攻击就会失败。&lt;/p&gt;
&lt;p&gt;在所有set-cookie的地方，给关键cookie都加上HttpOnly。&lt;/p&gt;
&lt;p&gt;HttpOnly并不是万能的，添加了不等于解决了XSS问题，它有助于缓解XSS攻击，但仍然需要其他能够解决XSS漏洞的方案。&lt;/p&gt;
&lt;h4 id=&quot;输入检查（没有结合语境，不够智能）&quot;&gt;输入检查（没有结合语境，不够智能）&lt;/h4&gt;&lt;p&gt;输入检查，很多时候被用于格式检查，必须放在服务器端代码中实现。&lt;/p&gt;
&lt;p&gt;在XSS的防御上，输入检查一般是检查用户输入的数据中是否包含一些特殊字符，如 &lt;code&gt;&amp;lt; &amp;gt; &amp;#39; &amp;quot;&lt;/code&gt; 等，如果发现则过滤或编码。&lt;/p&gt;
&lt;p&gt;比较智能的输入检查可能还会匹配XSS特征，称为“XSS Filter”&lt;/p&gt;
&lt;p&gt;全局的XSS Filter无法看到用户数据的输出语境，可能会漏报或者改变用户数据的语义，比如&lt;code&gt;1+1 &amp;gt; 2&lt;/code&gt; ，如果XSS Filter不够智能的话，就会粗暴的把 &amp;gt; 给过滤了。&lt;/p&gt;
&lt;p&gt;输入数据，还可能被展示在多个地方呢，每个地方的语境可能各不相同，如果使用单一的替换操作，则可能会出现问题。&lt;/p&gt;
&lt;h4 id=&quot;输出检查&quot;&gt;输出检查&lt;/h4&gt;&lt;p&gt;除了富文本的输出外，在变量输出到HTML页面时，可以使用编码或转义的方式来防御XSS攻击。&lt;/p&gt;
&lt;p&gt;为了对抗XSS，在HtmlEncode中要求至少转换以下字符：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;amp; -&amp;gt; &lt;span class=&quot;code&quot;&gt;`&amp;amp;amp;`&lt;/span&gt;  
&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt; &lt;span class=&quot;attribute&quot;&gt;-&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;code&quot;&gt;`&amp;amp;lt;`&lt;/span&gt;  
&lt;span class=&quot;blockquote&quot;&gt;&amp;gt; -&amp;gt; `&amp;amp;gt;`  &lt;/span&gt;
&quot; -&amp;gt; &lt;span class=&quot;code&quot;&gt;`&amp;amp;quot;`&lt;/span&gt;  
&#39; -&amp;gt; &lt;span class=&quot;code&quot;&gt;`&amp;amp;#x27;`&lt;/span&gt;  
/ -&amp;gt; &lt;span class=&quot;code&quot;&gt;`&amp;amp;#x2F;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;JavaScript的编码方式可以使用JavascriptEncode，并且在对抗XSS时，还要求输出的变量必须在括号内部，以避免造成安全问题。&lt;/p&gt;
&lt;p&gt;比较下面两种写法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var x = escapeJavascript(&lt;span class=&quot;variable&quot;&gt;$evil&lt;/span&gt;);
var y = &lt;span class=&quot;string&quot;&gt;&#39;&quot;&#39;&lt;/span&gt;+escapeJavascript(&lt;span class=&quot;variable&quot;&gt;$evil&lt;/span&gt;)+&lt;span class=&quot;string&quot;&gt;&#39;&quot;&#39;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面的两行代码可能会变成：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;variable&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;alert(&#39;xxs&#39;);
&lt;span class=&quot;variable&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; y&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;1;alert(&#39;xxs&#39;);&quot;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;前者执行了而外的代码，后者则是安全的。&lt;br&gt;在“Apache Common Lang”的“StringEscapeUtils”里，提供了许多的escape函数。&lt;br&gt;需要注意的是，编码后的长度可能会发生改变，从而影响某些有字符长度限制的功能。&lt;/p&gt;
&lt;h2 id=&quot;正确地防御XSS&quot;&gt;正确地防御XSS&lt;/h2&gt;&lt;p&gt;XSS的本质还是一种“HTML注入”，用户的数据被当成了HTML代码的一部分来执行。&lt;/p&gt;
&lt;p&gt;使用MVC架构的网站，XSS发生在View层，在应用拼接变量到HTML页面时产生。所以在用户提交数据处进行输入检查的方案，其实并不是在真正发生攻击的地方做防御。&lt;/p&gt;
&lt;p&gt;要根治XSS问题，可以列出所有XSS可能发生的场景，再一一解决。&lt;/p&gt;
&lt;h4 id=&quot;在HTML标签中输出&quot;&gt;在HTML标签中输出&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;&lt;span class=&quot;variable&quot;&gt;$var&lt;/span&gt;&amp;lt;/div&amp;gt;
&amp;lt;a href=&lt;span class=&quot;string&quot;&gt;&quot;#&quot;&lt;/span&gt; &amp;gt;&lt;span class=&quot;variable&quot;&gt;$var&lt;/span&gt;&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;攻击方式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;alert(&lt;span class=&quot;regexp&quot;&gt;/xss/&lt;/span&gt;)&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;#&quot;&lt;/span&gt; &amp;gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;onerror&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;alert(1)&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;防御方法： 对变量使用HtmlEncode。&lt;/p&gt;
&lt;h4 id=&quot;在HTML属性中输出&quot;&gt;在HTML属性中输出&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;property&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;abc&quot;&lt;/span&gt; &lt;span class=&quot;property&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;$var&quot;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span class=&quot;keyword&quot;&gt;div&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;攻击方式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;abc&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;alert(&lt;span class=&quot;regexp&quot;&gt;/xss/&lt;/span&gt;)&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;防御方法： 对变量使用HtmlEncode。&lt;/p&gt;
&lt;p&gt;在OWASP ESAPI中推荐了一种更严格的HtmlEncode：除了字母、数字外，其它所有的特殊字符都被编码成HTMLEntities。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;String sage = ESAPI.encoder&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;.encodeForHTMLAttribute&lt;span class=&quot;params&quot;&gt;(request.getParameter&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;input&quot;&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这种严格的编码方式，可以保证不会出现任何安全问题。&lt;/p&gt;
&lt;h4 id=&quot;在_script_标签中输出&quot;&gt;在 script 标签中输出&lt;/h4&gt;&lt;p&gt;首先应该确保输出的变量在引号中：&lt;code&gt;&amp;lt;script&amp;gt;var x = &amp;quot;$var&amp;quot;;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;br&gt;攻击者需要先闭合引号才能实施XSS攻击。&lt;br&gt;防御方法： 使用JavascriptEncode。&lt;/p&gt;
&lt;h4 id=&quot;在事件中输出&quot;&gt;在事件中输出&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;onclick&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;func(&#39;$var&#39;)&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;test&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;攻击方式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;onclick&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;func(&#39;&#39;);alert(/xss/);//&#39;)&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;test&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;防御方法： 使用JavascriptEncode。&lt;/p&gt;
&lt;h4 id=&quot;在地址中输出&quot;&gt;在地址中输出&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;[&lt;span class=&quot;link_label&quot;&gt;Protocal&lt;/span&gt;][&lt;span class=&quot;link_reference&quot;&gt;Host&lt;/span&gt;][&lt;span class=&quot;link_label&quot;&gt;Path&lt;/span&gt;][&lt;span class=&quot;link_reference&quot;&gt;Search&lt;/span&gt;][&lt;span class=&quot;link_label&quot;&gt;Hash&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在URL的path或者search中输出&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;http://www.evil.com/?test=$var&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;test&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;攻击方式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;&lt;span class=&quot;tag&quot;&gt;a&lt;/span&gt; href=&lt;span class=&quot;string&quot;&gt;&quot;http://www.evil.com/?test=&quot;&lt;/span&gt; onclick=&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&amp;gt;test&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;防御方法： 使用URLEncode。&lt;/p&gt;
&lt;p&gt;整个URL能够被用户完全控制&lt;br&gt;此时不能使用URLEncode，否则会改变URL的语义。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;$var&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;test&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;攻击方式：构造伪协议实施攻击&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;javascript:alert(1);&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;test&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;防御方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先检查变量是否以http开头，如果不是则自动添加，以保证不会出现伪协议类的XSS攻击&lt;/li&gt;
&lt;li&gt;再对变量进行URLEncode，即可保证不会有此类的XSS发生了。&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;XSS的定义&quot;&gt;XSS的定义&lt;/h2&gt;&lt;p&gt;XSS 全称Cross Site Script，跨站脚本攻击，HTML注入。&lt;/p&gt;
&lt;p&gt;通过前端代码注入篡改网页，插入恶意脚本，从而在用户浏览网页时，控制用户浏览器。&lt;/p&gt;
&lt;p&gt;带来cookie劫持问题、窃取用户
    
    </summary>
    
      <category term="Web" scheme="http://qq2867234.github.io/categories/Web/"/>
    
    
      <category term="Web安全" scheme="http://qq2867234.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
</feed>
